<?php

/**
 * Implements hook_ctools_plugin_api().
 */
function react_dashboard_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/*
 * Implement hook_theme().
 */
function react_dashboard_theme(){
  return array(
    'react_dashboard' => array(
      'template' => 'react-dashboard',
      'path' => drupal_get_path('module', 'react_dashboard') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function react_dashboard_menu() {
  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => '_react_dashboard_page',
    'access arguments' => array('access content'),
  );

  $items['dashboard_data'] = array(
    'title' => 'Dashboard Data',
    'page callback' => '_react_dashboard_data',
    'access arguments' => array('access content'),
  );

  $items['dashboard_autocomplete'] = array(
    'title' => 'Dashboard Autocomplete',
    'page callback' => '_react_dashboard_autocomplete',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Returns the dashboard page
 */
function _react_dashboard_page() {
  return theme('react_dashboard');
}


/**
 * Just a placeholder function showing how to create and enpoind
 * ready to be consumed by the react autocomplete component
 * included inside the react dashboard library.
 * In short you need to retrieve an array with the selection
 * where each selection is an object with the label and value
 * property inside.
 *
 * e.g. [ {label: 'One', value: 'one'}, {label: 'Two', value: 'two'}]
 */
function _react_dashboard_autocomplete() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'resource')
    ->propertyCondition('status', NODE_PUBLISHED)
    // ->fieldCondition('field_news_types', 'value', 'spotlight', '=')
    // ->fieldOrderBy('field_photo', 'fid', 'DESC')
    ->range(0, 10);
    // ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if (isset($result['node'])) {
    $news_items_nids = array_keys($result['node']);
    $news_items = entity_load('node', $news_items_nids);
  }
  $news_items = _to_autocomplete($news_items, array('label'=>'title', 'value' => 'nid'));

  return drupal_json_output($news_items);
}

/**
 * Convert an array of nodes to an array with items
 * for the autocomplete
 * @param  array  $items    An array with nodes
 * @param  array  $mappings An array with the mappings. e.g. array('label'=>'title', 'value' => 'uid')
 * @return array            The converted array
 */
function _to_autocomplete($items, $mappings) {
  return array_map(
    _map_autocomplete_fields($mappings),
    array_values($items));
}

/**
 * Returns a function to map fields to autocomplete fields.
 * @param  array $mappings  An array with the mappings. e.g. array('label'=>'title', 'value' => 'uid')
 * @return function
 */
function _map_autocomplete_fields($mappings){
  return function($item) use ($mappings) {
    return array(
      'label' => $item->{$mappings['label']},
      'value' => $item->{$mappings['value']}
    );
  };
}

/**
 * This is a placeholder function to retrieve the data for
 * your dashboard.
 * Sometimes you need to retrieve an array with the
 * needed data for the whole dashboard. In that cases you just
 * need to create a query retrieving all the required data.
 *
 * In some cases you need to query server data by passing
 * parameters. In that case you need to modify the menu item
 * to get parameters and add those to this function. Then
 * you can retrieve parametrized data by creating the appropiate
 * query statement.
 * @return array An array with the data for your dashboard
 */
function _react_dashboard_data() {
  return db_select('node', 'n')
    ->fields('n')
    ->execute()
    ->fetchAssoc();
}
